import os
import platform
import getpass
import sys
import ctypes # Только для Windows, для проверки прав администратора

# --- Вспомогательные функции ---

def get_user_info_unix():
    """Собирает информацию о правах пользователя в Unix-подобных системах (Linux, macOS)."""
    info = {}
    try:
        # --- Основная информация о пользователе ---
        info['username'] = getpass.getuser() # Имя пользователя, запустившего скрипт
        uid = os.getuid() # Реальный User ID
        euid = os.geteuid() # Эффективный User ID (важно для setuid)
        gid = os.getgid() # Реальный Group ID (основная группа)
        egid = os.getegid() # Эффективный Group ID (важно для setgid)

        info['uid'] = uid
        info['euid'] = euid
        info['gid'] = gid
        info['egid'] = egid

        # Попробуем получить больше деталей из системных баз данных
        try:
            import pwd
            user_entry = pwd.getpwuid(uid)
            info['full_name_or_comment'] = user_entry.pw_gecos
            info['home_directory'] = user_entry.pw_dir
            info['login_shell'] = user_entry.pw_shell
        except ImportError:
            info['note_pwd'] = "Модуль 'pwd' недоступен. Дополнительная информация о пользователе (полное имя, оболочка) не получена."
            info['home_directory'] = os.path.expanduser("~") # Альтернативный способ получить домашнюю директорию
        except KeyError:
             info['note_pwd'] = f"Не удалось найти пользователя с UID {uid} в базе данных 'pwd'."
             info['home_directory'] = os.path.expanduser("~")

        # --- Информация о группах ---
        try:
            import grp
            primary_group_entry = grp.getgrgid(gid)
            info['primary_group_name'] = primary_group_entry.gr_name
        except ImportError:
             info['note_grp'] = "Модуль 'grp' недоступен. Имена групп не получены."
             info['primary_group_name'] = f"GID: {gid}"
        except KeyError:
             info['note_grp'] = f"Не удалось найти группу с GID {gid} в базе данных 'grp'."
             info['primary_group_name'] = f"GID: {gid} (имя не найдено)"


        # Дополнительные группы
        try:
            supplementary_gids = os.getgroups()
            info['supplementary_groups'] = []
            if 'note_grp' not in info: # Если модуль grp доступен
                 for sgid in supplementary_gids:
                     try:
                         group_entry = grp.getgrgid(sgid)
                         info['supplementary_groups'].append(f"{group_entry.gr_name} (GID: {sgid})")
                     except KeyError:
                         info['supplementary_groups'].append(f"Неизвестная группа (GID: {sgid})")
            else:
                 info['supplementary_groups'] = [f"GID: {sgid}" for sgid in supplementary_gids]

        except AttributeError:
            info['note_groups'] = "Функция os.getgroups() недоступна в этой системе."
            info['supplementary_groups'] = []
        except ImportError:
             info['supplementary_groups'] = [] # Уже обработано выше

        # --- Проверка на root (Администратора) ---
        # Наиболее надежный способ - проверить эффективный UID
        info['is_admin'] = (euid == 0)
        info['admin_check_method'] = "Проверка эффективного UID (euid == 0)"

        # --- Контекст выполнения ---
        info['effective_ids_differ'] = (uid != euid or gid != egid)
        info['context_note'] = ("Реальные и эффективные ID совпадают." if not info['effective_ids_differ']
                                else "ВНИМАНИЕ: Эффективные ID отличаются от реальных! Скрипт может работать с повышенными правами (setuid/setgid).")

    except Exception as e:
        info['error'] = f"Произошла ошибка при сборе информации в Unix: {e}"

    return info

def get_user_info_windows():
    """Собирает информацию о правах пользователя в Windows."""
    info = {}
    try:
        # --- Основная информация о пользователе ---
        info['username'] = getpass.getuser()
        info['home_directory'] = os.path.expanduser("~")

        # --- Проверка на Администратора ---
        # Используем ctypes для вызова функции Windows API IsUserAnAdmin()
        # Это проверяет, запущен ли *текущий процесс* с правами администратора
        # (т.е. через "Запуск от имени администратора" или UAC)
        try:
            is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
            info['is_admin'] = is_admin
            info['admin_check_method'] = "Вызов Windows API: ctypes.windll.shell32.IsUserAnAdmin()"
            info['admin_context_note'] = ("Процесс запущен с правами администратора." if is_admin
                                          else "Процесс НЕ запущен с правами администратора (даже если пользователь входит в группу Администраторы).")
        except AttributeError:
            info['is_admin'] = "Не удалось определить (ctypes/shell32 недоступен)"
            info['admin_check_method'] = "Не удалось выполнить проверку через Windows API"
            info['admin_context_note'] = "Невозможно проверить, запущен ли процесс с повышенными правами."
        except Exception as e_admin:
             info['is_admin'] = f"Ошибка при проверке ({e_admin})"
             info['admin_check_method'] = "Ошибка при вызове Windows API"
             info['admin_context_note'] = ""


        # --- Получение SID и Групп (через внешнюю утилиту whoami) ---
        # Это менее надежно, чем прямые вызовы API (которые требуют pywin32),
        # но не требует установки дополнительных библиотек.
        info['sid'] = "Не удалось получить (требуется 'whoami')"
        info['groups'] = ["Не удалось получить (требуется 'whoami')"]
        import subprocess
        try:
            # Получаем SID
            result_sid = subprocess.run(['whoami', '/user'], capture_output=True, text=True, check=True, encoding='cp866', errors='ignore')
            # Ищем строку с SID, она обычно последняя
            lines = result_sid.stdout.strip().splitlines()
            if lines:
                 # Ищем строку, которая выглядит как SID (S-1-...)
                 for line in reversed(lines):
                     parts = line.split()
                     if len(parts) > 0 and parts[-1].startswith("S-1-"):
                          info['sid'] = parts[-1]
                          break
                 if info['sid'].startswith("Не удалось"): # Если не нашли
                     info['sid'] = f"Не удалось извлечь SID из вывода 'whoami /user':\n{result_sid.stdout.strip()}"
            else:
                 info['sid'] = f"Не удалось извлечь SID из вывода 'whoami /user' (пустой вывод)"

        except FileNotFoundError:
            info['sid'] = "'whoami.exe' не найден в PATH. Невозможно получить SID."
        except subprocess.CalledProcessError as e_sid:
            info['sid'] = f"Ошибка выполнения 'whoami /user': {e_sid}\nВывод ошибки:\n{e_sid.stderr.strip()}"
        except Exception as e_sid_other:
            info['sid'] = f"Неожиданная ошибка при получении SID: {e_sid_other}"

        try:
            # Получаем группы
            result_groups = subprocess.run(['whoami', '/groups'], capture_output=True, text=True, check=True, encoding='cp866', errors='ignore')
            lines = result_groups.stdout.strip().splitlines()
            groups_list = []
            # Пропускаем заголовок
            in_group_section = False
            for line in lines:
                if "---" in line: # Разделитель обычно есть
                    in_group_section = True
                    continue
                if in_group_section and line.strip():
                    # Пытаемся извлечь имя группы (обычно первая колонка до нескольких пробелов)
                    parts = line.split(maxsplit=1)
                    if parts:
                        groups_list.append(parts[0].strip()) # Берем первую часть как имя группы
            if groups_list:
                info['groups'] = groups_list
            else:
                 info['groups'] = [f"Не удалось извлечь группы из вывода 'whoami /groups':\n{result_groups.stdout.strip()}"]

        except FileNotFoundError:
             info['groups'] = ["'whoami.exe' не найден в PATH. Невозможно получить группы."]
        except subprocess.CalledProcessError as e_groups:
             info['groups'] = [f"Ошибка выполнения 'whoami /groups': {e_groups}\nВывод ошибки:\n{e_groups.stderr.strip()}"]
        except Exception as e_groups_other:
             info['groups'] = [f"Неожиданная ошибка при получении групп: {e_groups_other}"]

        # Примечание о членстве в группе Администраторы
        admin_group_name = "BUILTIN\\Администраторы" # Локализованное имя может отличаться!
        admin_group_sid = "S-1-5-32-544" # SID группы Администраторы (стандартный)
        is_member_of_admins = False
        if isinstance(info['groups'], list):
            for group in info['groups']:
                 # Проверяем по стандартному SID, т.к. имя может быть локализовано
                 # Нужен более сложный парсинг вывода whoami /groups /fo csv /nh чтобы надежно получить SID групп
                 # Для упрощения пока ищем по имени (менее надежно)
                 if admin_group_name in group:
                     is_member_of_admins = True
                     break
        info['is_member_of_admins_group'] = is_member_of_admins
        info['admin_group_membership_note'] = (f"Пользователь {'ВХОДИТ' if is_member_of_admins else 'НЕ ВХОДИТ'} в группу '{admin_group_name}'. "
                                                "(Проверка по имени группы, может быть неточной из-за локализации)."
                                                "\n    Важно: Членство в группе не означает, что *этот скрипт* запущен с повышенными правами.")


    except Exception as e:
        info['error'] = f"Произошла ошибка при сборе информации в Windows: {e}"

    return info

def print_info(info):
    """Красиво печатает собранную информацию."""
    if not info:
        print("Не удалось собрать информацию.")
        return
    if 'error' in info:
        print(f"ОШИБКА: {info['error']}")
        # Все равно попробуем напечатать то, что успели собрать
        info.pop('error') # Убираем ошибку из основного вывода

    print("-" * 60)
    print(f"Информация о правах пользователя ({info.get('username', 'N/A')})")
    print("-" * 60)

    print("\n[ Основная информация ]")
    print(f"  Имя пользователя:       {info.get('username', 'N/A')}")
    if 'uid' in info: # Unix-like
        print(f"  User ID (UID):          {info.get('uid', 'N/A')}")
        print(f"  Effective UID (EUID):   {info.get('euid', 'N/A')}")
        print(f"  Primary Group ID (GID): {info.get('gid', 'N/A')}")
        print(f"  Effective GID (EGID):   {info.get('egid', 'N/A')}")
        if info.get('effective_ids_differ', False):
            print(f"  Контекст выполнения:    {info.get('context_note', '')}")
    if 'sid' in info: # Windows
        print(f"  Security ID (SID):      {info.get('sid', 'N/A')}")

    print(f"  Домашняя директория:    {info.get('home_directory', 'N/A')}")
    if 'full_name_or_comment' in info:
        print(f"  Полное имя/Комментарий: {info.get('full_name_or_comment', 'N/A')}")
    if 'login_shell' in info:
        print(f"  Оболочка входа:         {info.get('login_shell', 'N/A')}")

    print("\n[ Права Администратора/Root ]")
    is_admin_val = info.get('is_admin', 'Неизвестно')
    print(f"  Является Администратором: {'ДА' if is_admin_val is True else 'НЕТ' if is_admin_val is False else is_admin_val}")
    if 'admin_check_method' in info:
        print(f"  Метод проверки:         {info.get('admin_check_method', 'N/A')}")
    if 'admin_context_note' in info: # Windows-специфичное примечание
         print(f"  Примечание (контекст):  {info.get('admin_context_note', '')}")

    print("\n[ Членство в группах ]")
    if 'primary_group_name' in info: # Unix-like
        print(f"  Основная группа:        {info.get('primary_group_name', 'N/A')}")
    if 'supplementary_groups' in info: # Unix-like
        print("  Дополнительные группы:")
        groups = info.get('supplementary_groups', [])
        if groups:
            for group in groups:
                print(f"    - {group}")
        else:
            print("    (нет)")
    if 'groups' in info: # Windows
         print("  Группы (из 'whoami /groups'):")
         groups = info.get('groups', [])
         if groups:
             for group in groups:
                  print(f"    - {group}")
         else:
             print("    (не удалось получить или нет групп)")
         if 'is_member_of_admins_group' in info: # Windows-специфичное примечание
             print(f"\n  Проверка членства (Admin): {info.get('admin_group_membership_note', '')}")


    # Вывод служебных записок, если они есть
    notes = {k: v for k, v in info.items() if k.startswith('note_')}
    if notes:
        print("\n[ Служебные примечания ]")
        for key, value in notes.items():
             print(f"  - {value}")

    print("-" * 60)


# --- Основной блок ---
if __name__ == "__main__":
    os_name = platform.system()
    user_permissions = {}

    print(f"Определена операционная система: {os_name}")

    if os_name == "Linux" or os_name == "Darwin": # Darwin это macOS
        # Проверяем наличие необходимых модулей для Unix
        missing_modules = []
        try:
            import pwd
        except ImportError:
            missing_modules.append("pwd")
        try:
            import grp
        except ImportError:
            missing_modules.append("grp")

        if missing_modules:
            print(f"\nПредупреждение: Модули {', '.join(missing_modules)} недоступны.")
            print("Часть информации о пользователе и группах (имена, комментарии) не будет получена.")

        user_permissions = get_user_info_unix()

    elif os_name == "Windows":
        user_permissions = get_user_info_windows()
        # Дополнительная проверка на наличие 'whoami'
        import shutil
        if not shutil.which("whoami"):
            print("\nПредупреждение: Утилита 'whoami.exe' не найдена в системном PATH.")
            print("Информация о SID пользователя и группах не может быть получена стандартным способом.")

    else:
        print(f"Операционная система '{os_name}' не поддерживается напрямую этим скриптом.")
        # Попробуем вывести базовую информацию, если возможно
        try:
            user_permissions['username'] = getpass.getuser()
            user_permissions['home_directory'] = os.path.expanduser("~")
            user_permissions['note_os'] = "Базовая информация для неподдерживаемой ОС."
        except Exception as e:
             user_permissions['error'] = f"Не удалось получить даже базовую информацию: {e}"

    print_info(user_permissions)

    # Дополнительный комментарий про sudo/Run As
    if os_name != "Windows":
        print("\nПримечание для Unix-подобных систем:")
        print(" - Для запуска с правами root используйте 'sudo python ваш_скрипт.py'")
        print(" - Права 'root' (UID 0) дают полный контроль над системой.")
        print(" - Эффективные ID (EUID/EGID) важны для программ с флагами setuid/setgid.")
    elif os_name == "Windows":
         print("\nПримечание для Windows:")
         print(" - Чтобы запустить скрипт с правами администратора, щелкните ПКМ по файлу .py или ярлыку")
         print("   и выберите 'Запуск от имени администратора' (потребуется подтверждение UAC).")
         print(" - Даже если пользователь входит в группу 'Администраторы', скрипт по умолчанию")
         print("   запускается с обычными правами. Проверка 'IsUserAnAdmin' показывает, повышены ли права *этого процесса*.")
         print(" - Для получения более детальной информации о конкретных правах (например, SeDebugPrivilege)")
         print("   потребуются более сложные вызовы Windows API (обычно через модуль pywin32).")
